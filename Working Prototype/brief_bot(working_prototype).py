# -*- coding: utf-8 -*-
"""Brief_Bot(workinf_prototype)

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BXZWdON1G-5j-CW8O8Z2mLyVytx0syxV

# Brief Bot

## Required Dependencies
"""

!pip install --upgrade ibm-watsonx-ai
!pip install -q git+https://github.com/openai/whisper.git
!pip install ffmpeg-python

"""## files upload"""

from google.colab import files

print("üìÅ Upload audio/video file (MP3, WAV, MP4, etc.)")
uploaded = files.upload()
file_path = next(iter(uploaded))

"""## Converting to WAV/MP3 (if video)"""

import os
import mimetypes
import ffmpeg

# auto-detect mimetype
mimetype = mimetypes.guess_type(file_path)[0]
base_name = os.path.splitext(file_path)[0]
audio_path = f"{base_name}.mp3"

if mimetype and mimetype.startswith("video"):
    print("üé• Converting video to audio...")
    ffmpeg.input(file_path).output(audio_path, format='mp3', acodec='libmp3lame').run(overwrite_output=True)
else:
    audio_path = file_path  # already audio

"""## Transcribe with Whisper"""

import whisper

model = whisper.load_model("base")
result = model.transcribe(audio_path)
transcript = result["text"]

print("‚úÖ Transcript:")
print(transcript)

"""## Call IBM Granite for Summary"""

#  Use your actual API key and project ID here
API_KEY = "*****************************"
PROJECT_ID = "*******************************"
REGION = "us-south"

from ibm_watsonx_ai.foundation_models import Model
from ibm_watsonx_ai import Credentials
import re

credentials = Credentials(
    api_key=API_KEY,
    url=f"https://{REGION}.ml.cloud.ibm.com"
)

model = Model(
    model_id="ibm/granite-3-3-8b-instruct",
    credentials=credentials,
    project_id=PROJECT_ID,
    params={
        "decoding_method": "greedy",
        "max_new_tokens": 300,
        "stop_sequences": ["</response>"]
    }
)

prompt = f"""
<think>
You are a smart assistant. Given this meeting transcript, summarize the key points and action items with deadlines and owners.

Transcript:
{transcript}
</think>
<response>
"""

summary = model.generate_text(prompt)
cleaned = re.sub(r"[*#]+", "", summary)
cleaned = re.sub(r"\n{2,}", "\n", cleaned)
print("üìã Summary:\n", cleaned.strip())